# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import djangoplicity.metadata.archives.fields
import djangoplicity.archives.base
import djangoplicity.archives.translation
import djangoplicity.archives.fields
import djangoplicity.metadata.translation.fields
import djangoplicity.translation.fields
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('metadata', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.SlugField(max_length=10, serialize=False, primary_key=True)),
                ('name', models.CharField(help_text='Name of this color', max_length=50)),
                ('upper_limit', models.FloatField(help_text='Hue value (range 0-1) for the HSV model for the upper boundary of this colour.', null=True)),
            ],
            options={
                'ordering': ('upper_limit',),
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('lang', models.CharField(default=b'en', max_length=5, verbose_name='Language', db_index=True, choices=[(b'en', b'English'), (b'en-au', b'English/Australia'), (b'en-gb', b'English/United Kingdom'), (b'en-ie', b'English/Ireland'), (b'en-us', b'English/US'), (b'sq', b'Albanian'), (b'cs', b'Czech'), (b'da', b'Danish'), (b'nl', b'Dutch'), (b'nl-be', b'Dutch/Belgium'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'fr-be', b'French/Belgium'), (b'fr-ch', b'French/Switzerland'), (b'de', b'German'), (b'de-at', b'German/Austria'), (b'de-be', b'German/Belgium'), (b'de-ch', b'German/Switzerland'), (b'is', b'Icelandic'), (b'it', b'Italian'), (b'it-ch', b'Italian/Switzerland'), (b'no', b'Norwegian'), (b'pl', b'Polish'), (b'pt-br', b'Portuguese/Brazil'), (b'pt', b'Portuguese/Portugal'), (b'ru', b'Russian'), (b'es', b'Spanish'), (b'es-cl', b'Spanish/Chile'), (b'sr', b'Serbian'), (b'sv', b'Swedish'), (b'tr', b'Turkish'), (b'uk', b'Ukrainian')])),
                ('translation_ready', models.BooleanField(default=False, help_text='When you check this box and save this translation, an automatic notification email will be sent.')),
                ('priority', djangoplicity.archives.fields.PriorityField(help_text='Assessment of the quality of the image (100 highest, 0 lowest). Higher priority images are ranked higher in search results than lower priority images.', db_index=True)),
                ('creator', djangoplicity.metadata.archives.fields.AVMCreatorField(default=djangoplicity.media.consts.DEFAULT_CREATOR_FUNC, max_length=255, blank=True, help_text='Original creator of the resource at the organizational level.', null=True, verbose_name='Creator')),
                ('creator_url', djangoplicity.metadata.archives.fields.AVMCreatorURLField(default=djangoplicity.media.consts.DEFAULT_CREATOR_URL_FUNC, max_length=255, blank=True, help_text='A simple URL pointing to the (top level) outreach webpage for the original creator.', null=True, verbose_name='Creator URL')),
                ('contact_address', djangoplicity.metadata.archives.fields.AVMContactAddressField(default=djangoplicity.media.consts.DEFAULT_CONTACT_ADDRESS_FUNC, max_length=255, blank=True, help_text='Street address of the primary contact for the resource.', null=True, verbose_name='Contact Address')),
                ('contact_city', djangoplicity.metadata.archives.fields.AVMContactCityField(default=djangoplicity.media.consts.DEFAULT_CONTACT_CITY_FUNC, max_length=255, blank=True, help_text='City of the primary contact for the resource.', null=True, verbose_name='Contact City')),
                ('contact_state_province', djangoplicity.metadata.archives.fields.AVMContactStateProvinceField(default=djangoplicity.media.consts.DEFAULT_CONTACT_STATE_PROVINCE_FUNC, max_length=255, blank=True, help_text='State or province of the primary contact for the resource.', null=True, verbose_name='Contact State/Province')),
                ('contact_postal_code', djangoplicity.metadata.archives.fields.AVMContactPostalCodeField(default=djangoplicity.media.consts.DEFAULT_CONTACT_POSTAL_CODE_FUNC, max_length=50, blank=True, help_text='Zip or postal code of the primary contact for the resource.', null=True, verbose_name='Contact Postalcode')),
                ('contact_country', djangoplicity.metadata.archives.fields.AVMContactCountryField(default=djangoplicity.media.consts.DEFAULT_CONTACT_COUNTRY_FUNC, max_length=255, blank=True, help_text='Country of the primary contact for the resource.', null=True, verbose_name='Contact Country')),
                ('rights', djangoplicity.metadata.archives.fields.AVMRightsField(default=djangoplicity.media.consts.DEFAULT_RIGHTS_FUNC, help_text='Copyright and related intellectual property rights description.', null=True, verbose_name='Rights', blank=True)),
                ('title', djangoplicity.metadata.archives.fields.AVMTitleField(help_text='General descriptive title given to the image resource.', max_length=255, db_index=True)),
                ('headline', djangoplicity.metadata.archives.fields.AVMHeadlineField(help_text='Short description of the full caption.', null=True, blank=True)),
                ('description', djangoplicity.metadata.archives.fields.AVMDescriptionField(help_text='Full caption and related description text for the image resource.', null=True, blank=True)),
                ('distance_ly', djangoplicity.metadata.archives.fields.AVMDistanceLyField(decimal_places=1, max_digits=13, blank=True, help_text='The distance to the object, measured in light years.', null=True, verbose_name='Distance (in ly)')),
                ('distance_z', djangoplicity.metadata.archives.fields.AVMDistanceZField(decimal_places=3, max_digits=5, blank=True, help_text='The distance to the object, measured in redshift.', null=True, verbose_name='Distance  (redshift)')),
                ('distance_notes', djangoplicity.metadata.archives.fields.AVMDistanceNotesField(help_text='Comment about the contents of the Distance tag.', null=True, verbose_name='Distance Notes', blank=True)),
                ('credit', djangoplicity.metadata.archives.fields.AVMCreditField(default=djangoplicity.media.consts.DEFAULT_CREDIT_FUNC, help_text='The minimum information that the Publisher would like to see mentioned when the resource is used.', null=False, blank=True)),
                ('id', djangoplicity.metadata.archives.fields.AVMIdField(help_text='Id of image - used in the URL for the image as well as the filename for the different formats.', serialize=False, primary_key=True)),
                ('type', djangoplicity.metadata.archives.fields.AVMTypeField(choices=((b'Observation', 'Observation'), (b'Artwork', 'Artwork'), (b'Photographic', 'Photographic'), (b'Planetary', 'Planetary'), (b'Simulation', 'Simulation'), (b'Collage', 'Collage'), (b'Chart', 'Chart')), max_length=12, blank=True, help_text='The type of image/media resource.', null=True, verbose_name='Type')),
                ('spectral_notes', djangoplicity.metadata.archives.fields.AVMSpectralNotesField(help_text='Free-text field to allow for more detailed discussions of bandpasses and color mappings.', null=True, verbose_name='Spectral Notes', blank=True)),
                ('spatial_coordinate_frame', djangoplicity.metadata.archives.fields.AVMSpatialCoordinateFrameField(choices=((b'ICRS', b'ICRS'), (b'FK5', b'FK5'), (b'FK4', b'FK4'), (b'ECL', b'ECL'), (b'GAL', b'GAL'), (b'SGAL', b'SGAL')), max_length=4, blank=True, help_text='Coordinate system reference frame. Spatial.CoordinateFrame should be chosen from a pre-defined list.', null=True, verbose_name='Coordinate Frame')),
                ('spatial_equinox', djangoplicity.metadata.archives.fields.AVMSpatialEquinoxField(choices=((b'J2000', b'J2000'), (b'B1950', b'B1950')), max_length=5, blank=True, help_text='Equinox for Spatial.CoordinateFrame in decimal years.', null=True, verbose_name='Equinox')),
                ('spatial_reference_value', djangoplicity.metadata.archives.fields.AVMSpatialReferenceValueField(help_text='Reference coordinates (RA and Dec) for the image (2 element list in decimal degrees).', max_length=47, null=True, verbose_name='Reference Value', blank=True)),
                ('spatial_reference_dimension', djangoplicity.metadata.archives.fields.AVMSpatialReferenceDimensionField(help_text='Size of the image in pixels (2 element list).', max_length=47, null=True, verbose_name='Reference Dimension', blank=True)),
                ('spatial_reference_pixel', djangoplicity.metadata.archives.fields.AVMSpatialReferencePixelField(help_text='X,Y coordinates of the pixel in the image to which the reference coordinate (Spatial.ReferenceValue) refers (2 element list).', max_length=47, null=True, verbose_name='Reference Pixel', blank=True)),
                ('spatial_scale', djangoplicity.metadata.archives.fields.AVMSpatialScaleField(help_text='Spatial scale of the image in number of degrees/pixel (2 element list).', max_length=47, null=True, verbose_name='Scale', blank=True)),
                ('spatial_rotation', djangoplicity.metadata.archives.fields.AVMSpatialRotationField(help_text='Position angle of the Y axis in degrees measured east from north.', max_length=23, null=True, verbose_name='Rotation', blank=True)),
                ('spatial_coordsystem_projection', djangoplicity.metadata.archives.fields.AVMSpatialCoordsystemProjectionField(choices=((b'TAN', b'TAN'), (b'SIN', b'SIN'), (b'ARC', b'ARC'), (b'AIT', b'AIT'), (b'CAR', b'CAR'), (b'CEA', b'CEA')), max_length=3, blank=True, help_text='A combination of the coordinate system and the projection of the image.', null=True, verbose_name='Coordinate System Projection')),
                ('spatial_quality', djangoplicity.metadata.archives.fields.AVMSpatialQualityField(choices=((b'Full', 'Full'), (b'Position', 'Position')), max_length=8, blank=True, help_text='This qualitatively describes the reliability of the spatial coordinate information in this metadata.', null=True, verbose_name='Quality')),
                ('spatial_notes', djangoplicity.metadata.archives.fields.AVMSpatialNotesField(help_text='Free-text description to expand further on coordinates/geometry of image.', null=True, verbose_name='Notes', blank=True)),
                ('spatial_fits_header', djangoplicity.metadata.archives.fields.AVMSpatialNotesField(help_text='Free-text description to expand further on coordinates/geometry of image.', null=True, verbose_name='Notes', blank=True)),
                ('publisher', djangoplicity.metadata.archives.fields.AVMPublisherField(default=djangoplicity.media.consts.DEFAULT_PUBLISHER_FUNC, max_length=255, blank=True, help_text='Publisher of the resource.', null=True, verbose_name='Publisher')),
                ('publisher_id', djangoplicity.metadata.archives.fields.AVMPublisherIdField(default=djangoplicity.media.consts.DEFAULT_PUBLISHER_ID_FUNC, max_length=255, blank=True, help_text='ID of publisher registered as VAMP providers.', null=True, verbose_name='Publisher ID')),
                ('width', djangoplicity.metadata.archives.fields.AVMFileDimensionWidth(help_text='Width in pixels of the image resource.', null=True, verbose_name='Width', blank=True)),
                ('height', djangoplicity.metadata.archives.fields.AVMFileDimensionHeight(help_text='Height in pixels of the image resource.', null=True, verbose_name='Height', blank=True)),
                ('file_type', djangoplicity.metadata.archives.fields.AVMFileType(choices=((b'TIFF', b'TIFF'), (b'JPEG', b'JPEG'), (b'PNG', b'PNG'), (b'GIF', b'GIF'), (b'PSD', b'PSD'), (b'PDF', b'PDF')), max_length=4, blank=True, help_text='The format of the file. For images this would include TIFF, JPEG, PNG, GIF, PSD, PDF.', null=True, verbose_name='File Type')),
                ('file_size', djangoplicity.metadata.archives.fields.AVMFileSize(help_text='Size of the image resource, measured in kilobytes.', null=True, verbose_name='File Size', blank=True)),
                ('zoomify', models.BooleanField(default=False, verbose_name=b'Zoomable')),
                ('wallpapers', models.BooleanField(default=True, verbose_name=b'Wallpapers')),
                ('print_layout', models.BooleanField(default=False, verbose_name=b'Print Layout')),
                ('zoomable', models.BooleanField(default=False, verbose_name='Use zoomable as main')),
                ('keep_newsfeature', models.BooleanField(default=False, verbose_name=b'Disable News Feature Auto-Overwite')),
                ('old_ids', models.CharField(max_length=255)),
                ('press_release_link', models.CharField(help_text='External link to non-local press releases.', max_length=255, blank=True)),
                ('long_caption_link', models.CharField(help_text='External link to a longer image caption located elsewhere.', max_length=255, blank=True)),
                ('magnet_uri', models.CharField(max_length=255, blank=True)),
                ('release_date', djangoplicity.archives.fields.ReleaseDateTimeField(db_index=True, null=True, blank=True)),
                ('embargo_date', djangoplicity.archives.fields.ReleaseDateTimeField(db_index=True, null=True, blank=True)),
                ('published', models.BooleanField(default=False, db_index=True, verbose_name='Published')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('release_date_owner', models.SlugField(null=True, blank=True)),
                ('subject_category', djangoplicity.metadata.translation.fields.TranslationAVMSubjectCategoryField(help_text='The type(s) of object or objects in the resource, or general subject matter of an image, taken from a controlled vocabulary taxonomy.', to='metadata.TaxonomyHierarchy', null=True, verbose_name='Subject Category', blank=True)),
                ('subject_name', djangoplicity.metadata.translation.fields.TranslationAVMSubjectNameField(help_text='Proper names/catalog numbers for key objects/subjects in the image field.', to='metadata.SubjectName', null=True, verbose_name='Subject Name', blank=True)),
                ('tagging_status', djangoplicity.translation.fields.TranslationManyToManyField(to='metadata.TaggingStatus', blank=True)),
            ],
            options={
                'ordering': ['-priority', '-release_date'],
                'permissions': [('view_only_non_default', 'Can view only non default language')],
            },
            bases=(djangoplicity.archives.base.ArchiveModel, models.Model),
        ),
        migrations.CreateModel(
            name='ImageColor',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('ratio', models.FloatField()),
                ('color', models.ForeignKey(to='media.Color', on_delete=django.db.models.deletion.CASCADE)),
                ('image', djangoplicity.translation.fields.TranslationForeignKey(to='media.Image', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ImageComparison',
            fields=[
                ('lang', models.CharField(default=b'en', max_length=5, verbose_name='Language', db_index=True, choices=[(b'en', b'English'), (b'en-au', b'English/Australia'), (b'en-gb', b'English/United Kingdom'), (b'en-ie', b'English/Ireland'), (b'en-us', b'English/US'), (b'sq', b'Albanian'), (b'cs', b'Czech'), (b'da', b'Danish'), (b'nl', b'Dutch'), (b'nl-be', b'Dutch/Belgium'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'fr-be', b'French/Belgium'), (b'fr-ch', b'French/Switzerland'), (b'de', b'German'), (b'de-at', b'German/Austria'), (b'de-be', b'German/Belgium'), (b'de-ch', b'German/Switzerland'), (b'is', b'Icelandic'), (b'it', b'Italian'), (b'it-ch', b'Italian/Switzerland'), (b'no', b'Norwegian'), (b'pl', b'Polish'), (b'pt-br', b'Portuguese/Brazil'), (b'pt', b'Portuguese/Portugal'), (b'ru', b'Russian'), (b'es', b'Spanish'), (b'es-cl', b'Spanish/Chile'), (b'sr', b'Serbian'), (b'sv', b'Swedish'), (b'tr', b'Turkish'), (b'uk', b'Ukrainian')])),
                ('translation_ready', models.BooleanField(default=False, help_text='When you check this box and save this translation, an automatic notification email will be sent.')),
                ('id', djangoplicity.archives.fields.IdField(help_text='Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.', serialize=False, primary_key=True)),
                ('priority', djangoplicity.archives.fields.PriorityField(help_text='Assessment of the quality of the image comparison (100 highest, 0 lowest). Higher priority images are ranked higher in search results than lower priority images.', db_index=True)),
                ('title', djangoplicity.metadata.archives.fields.AVMTitleField(help_text='General descriptive title given to the image resource.', max_length=255, db_index=True)),
                ('description', djangoplicity.metadata.archives.fields.AVMDescriptionField(help_text='Full caption and related description text for the image resource.', null=True, blank=True)),
                ('credit', djangoplicity.metadata.archives.fields.AVMCreditField(default=djangoplicity.media.consts.DEFAULT_CREDIT_FUNC, help_text='The minimum information that the Publisher would like to see mentioned when the resource is used.', null=False, blank=True)),
                ('release_date', djangoplicity.archives.fields.ReleaseDateTimeField(db_index=True, null=True, blank=True)),
                ('embargo_date', djangoplicity.archives.fields.ReleaseDateTimeField(db_index=True, null=True, blank=True)),
                ('published', models.BooleanField(default=False, db_index=True, verbose_name='Published')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('release_date_owner', models.SlugField(null=True, blank=True)),
                ('image_after', djangoplicity.translation.fields.TranslationForeignKey(related_name='imagecomparison_after_set', to='media.Image', null=True, on_delete=django.db.models.deletion.CASCADE)),
                ('image_before', djangoplicity.translation.fields.TranslationForeignKey(related_name='imagecomparison_before_set', to='media.Image', null=True, on_delete=django.db.models.deletion.CASCADE)),
                ('source', djangoplicity.translation.fields.TranslationForeignKey(related_name='translations', verbose_name='Translation source', blank=True, to='media.ImageComparison', null=True, only_sources=False, on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'ordering': ('-priority', '-release_date'),
                'permissions': [('view_only_non_default', 'Can view only non default language')],
            },
            bases=(djangoplicity.archives.base.ArchiveModel, models.Model),
        ),
        migrations.CreateModel(
            name='ImageContact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('email', models.CharField(max_length=255, blank=True)),
                ('telephone', models.CharField(max_length=255, blank=True)),
                ('image', djangoplicity.translation.fields.TranslationForeignKey(to='media.Image', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'verbose_name': 'Contact',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='ImageExposure',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('spectral_color_assignment', djangoplicity.metadata.archives.fields.AVMSpectralColorAssignmentField(choices=((b'Purple', 'Purple'), (b'Blue', 'Blue'), (b'Cyan', 'Cyan'), (b'Green', 'Green'), (b'Yellow', 'Yellow'), (b'Orange', 'Orange'), (b'Red', 'Red'), (b'Magenta', 'Magenta'), (b'Grayscale', 'Grayscale'), (b'Pseudocolor', 'Pseudocolor'), (b'Luminosity', 'Luminosity')), max_length=11, blank=True, help_text='The output color that is assigned to an exposure. One Spectral.ColorAssignment entry per exposure.', null=True, verbose_name='Spectral Color Assignment')),
                ('spectral_band', djangoplicity.metadata.archives.fields.AVMSpectralBandField(choices=((b'Radio', 'Radio'), (b'Millimeter', 'Millimeter'), (b'Infrared', 'Infrared'), (b'Optical', 'Optical'), (b'Ultraviolet', 'Ultraviolet'), (b'X-ray', 'X-ray'), (b'Gamma-ray', 'Gamma-ray')), max_length=11, blank=True, help_text='Waveband of the component exposure from a pre-defined list defining the general part of the spectrum covered. One Spectral.Band entry per exposure.', null=True, verbose_name='Spectral Band')),
                ('spectral_bandpass', djangoplicity.metadata.archives.fields.AVMSpectralBandpassField(help_text='Bandpass of the individual exposure. One Spectral.Bandpass entry per exposure.', max_length=255, null=True, verbose_name='Spectral Bandpass', blank=True)),
                ('spectral_central_wavelength', djangoplicity.metadata.archives.fields.AVMSpectralCentralWavelengthField(help_text='Central wavelength of the filter used for the individual exposure measured in nanometers. One Spectral.CentralWavelength entry per exposure.', max_length=23, null=True, verbose_name='Spectral Central Wavelength', blank=True)),
                ('temporal_start_time', djangoplicity.metadata.archives.fields.AVMTemporalStartTimeField(help_text="Start time of the exposure in ISO 8601 format 'yyyy-mm-ddThh:mm' (UT; time portion is optional). One Temporal.StartTime entry per exposure.", null=True, verbose_name='Temporal Start Time', blank=True)),
                ('temporal_integration_time', djangoplicity.metadata.archives.fields.AVMTemporalIntegrationTimeField(help_text='The exposure time in seconds. One Temporal.IntegrationTime entry per exposure.', max_length=23, null=True, verbose_name='Temporal Integration Time', blank=True)),
                ('dataset_id', djangoplicity.metadata.archives.fields.AVMDatasetIDField(help_text='Identifier for the source FITS dataset for each exposure in the image. If available, this can be a VO-compliant reference to the dataset [ivo://AuthorityID/ResourceKey]. One DatasetID entry per exposure.', max_length=255, null=True, verbose_name='Dataset ID', blank=True)),
                ('facility', djangoplicity.metadata.archives.fields.AVMFacilityField(blank=True, to='metadata.Facility', help_text='Telescopes or observatories used for the observations.', null=True, verbose_name='Facility', on_delete=django.db.models.deletion.CASCADE)),
                ('image', djangoplicity.translation.fields.TranslationForeignKey(to='media.Image', on_delete=django.db.models.deletion.CASCADE)),
                ('instrument', djangoplicity.metadata.archives.fields.AVMInstrumentField(blank=True, to='metadata.Instrument', help_text='Instrument used to collect the data. One Instrument entry per exposure.', null=True, verbose_name='Instrument', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'verbose_name': 'Exposure',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='PictureOfTheWeek',
            fields=[
                ('lang', models.CharField(default=b'en', max_length=5, verbose_name='Language', db_index=True, choices=[(b'en', b'English'), (b'en-au', b'English/Australia'), (b'en-gb', b'English/United Kingdom'), (b'en-ie', b'English/Ireland'), (b'en-us', b'English/US'), (b'sq', b'Albanian'), (b'cs', b'Czech'), (b'da', b'Danish'), (b'nl', b'Dutch'), (b'nl-be', b'Dutch/Belgium'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'fr-be', b'French/Belgium'), (b'fr-ch', b'French/Switzerland'), (b'de', b'German'), (b'de-at', b'German/Austria'), (b'de-be', b'German/Belgium'), (b'de-ch', b'German/Switzerland'), (b'is', b'Icelandic'), (b'it', b'Italian'), (b'it-ch', b'Italian/Switzerland'), (b'no', b'Norwegian'), (b'pl', b'Polish'), (b'pt-br', b'Portuguese/Brazil'), (b'pt', b'Portuguese/Portugal'), (b'ru', b'Russian'), (b'es', b'Spanish'), (b'es-cl', b'Spanish/Chile'), (b'sr', b'Serbian'), (b'sv', b'Swedish'), (b'tr', b'Turkish'), (b'uk', b'Ukrainian')])),
                ('translation_ready', models.BooleanField(default=False, help_text='When you check this box and save this translation, an automatic notification email will be sent.')),
                ('id', djangoplicity.archives.fields.IdField(help_text='Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.', serialize=False, primary_key=True)),
                ('release_date', djangoplicity.archives.fields.ReleaseDateTimeField(db_index=True, null=True, blank=True)),
                ('embargo_date', djangoplicity.archives.fields.ReleaseDateTimeField(db_index=True, null=True, blank=True)),
                ('published', models.BooleanField(default=False, db_index=True, verbose_name='Published')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('comparison', models.ForeignKey(blank=True, to='media.ImageComparison', null=True, on_delete=django.db.models.deletion.CASCADE)),
                ('image', djangoplicity.translation.fields.TranslationForeignKey(blank=True, to='media.Image', null=True, only_sources=False, on_delete=django.db.models.deletion.CASCADE)),
                ('source', djangoplicity.translation.fields.TranslationForeignKey(related_name='translations', verbose_name='Translation source', blank=True, to='media.PictureOfTheWeek', null=True, only_sources=False, on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'ordering': ('-release_date',),
                'verbose_name_plural': 'Pictures of the Week',
                'permissions': [('view_only_non_default', 'Can view only non default language')],
            },
            bases=(djangoplicity.archives.base.ArchiveModel, models.Model),
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('lang', models.CharField(default=b'en', max_length=5, verbose_name='Language', db_index=True, choices=[(b'en', b'English'), (b'en-au', b'English/Australia'), (b'en-gb', b'English/United Kingdom'), (b'en-ie', b'English/Ireland'), (b'en-us', b'English/US'), (b'sq', b'Albanian'), (b'cs', b'Czech'), (b'da', b'Danish'), (b'nl', b'Dutch'), (b'nl-be', b'Dutch/Belgium'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'fr-be', b'French/Belgium'), (b'fr-ch', b'French/Switzerland'), (b'de', b'German'), (b'de-at', b'German/Austria'), (b'de-be', b'German/Belgium'), (b'de-ch', b'German/Switzerland'), (b'is', b'Icelandic'), (b'it', b'Italian'), (b'it-ch', b'Italian/Switzerland'), (b'no', b'Norwegian'), (b'pl', b'Polish'), (b'pt-br', b'Portuguese/Brazil'), (b'pt', b'Portuguese/Portugal'), (b'ru', b'Russian'), (b'es', b'Spanish'), (b'es-cl', b'Spanish/Chile'), (b'sr', b'Serbian'), (b'sv', b'Swedish'), (b'tr', b'Turkish'), (b'uk', b'Ukrainian')])),
                ('translation_ready', models.BooleanField(default=False, help_text='When you check this box and save this translation, an automatic notification email will be sent.')),
                ('content_server', models.CharField(default=b'media.eso.org', max_length=255, blank=True, choices=[(b'', b'Default'), (b'media.eso.org', b'media.eso.org'), (b'CDN77', b'CDN77')])),
                ('content_server_ready', models.BooleanField(default=False)),
                ('priority', djangoplicity.archives.fields.PriorityField(help_text='Assessment of the quality of the image (100 highest, 0 lowest). Higher priority images are ranked higher in search results than lower priority images.', db_index=True)),
                ('creator', djangoplicity.metadata.archives.fields.AVMCreatorField(default=djangoplicity.media.consts.DEFAULT_CREATOR_FUNC, max_length=255, blank=True, help_text='Original creator of the resource at the organizational level.', null=True, verbose_name='Creator')),
                ('creator_url', djangoplicity.metadata.archives.fields.AVMCreatorURLField(default=djangoplicity.media.consts.DEFAULT_CREATOR_URL_FUNC, max_length=255, blank=True, help_text='A simple URL pointing to the (top level) outreach webpage for the original creator.', null=True, verbose_name='Creator URL')),
                ('contact_address', djangoplicity.metadata.archives.fields.AVMContactAddressField(default=djangoplicity.media.consts.DEFAULT_CONTACT_ADDRESS_FUNC, max_length=255, blank=True, help_text='Street address of the primary contact for the resource.', null=True, verbose_name='Contact Address')),
                ('contact_city', djangoplicity.metadata.archives.fields.AVMContactCityField(default=djangoplicity.media.consts.DEFAULT_CONTACT_CITY_FUNC, max_length=255, blank=True, help_text='City of the primary contact for the resource.', null=True, verbose_name='Contact City')),
                ('contact_state_province', djangoplicity.metadata.archives.fields.AVMContactStateProvinceField(default=djangoplicity.media.consts.DEFAULT_CONTACT_STATE_PROVINCE_FUNC, max_length=255, blank=True, help_text='State or province of the primary contact for the resource.', null=True, verbose_name='Contact State/Province')),
                ('contact_postal_code', djangoplicity.metadata.archives.fields.AVMContactPostalCodeField(default=djangoplicity.media.consts.DEFAULT_CONTACT_POSTAL_CODE_FUNC, max_length=50, blank=True, help_text='Zip or postal code of the primary contact for the resource.', null=True, verbose_name='Contact Postalcode')),
                ('contact_country', djangoplicity.metadata.archives.fields.AVMContactCountryField(default=djangoplicity.media.consts.DEFAULT_CONTACT_COUNTRY_FUNC, max_length=255, blank=True, help_text='Country of the primary contact for the resource.', null=True, verbose_name='Contact Country')),
                ('rights', djangoplicity.metadata.archives.fields.AVMRightsField(default=djangoplicity.media.consts.DEFAULT_RIGHTS_FUNC, help_text='Copyright and related intellectual property rights description.', null=True, verbose_name='Rights', blank=True)),
                ('title', djangoplicity.metadata.archives.fields.AVMTitleField(help_text='General descriptive title given to the image resource.', max_length=255, db_index=True)),
                ('headline', djangoplicity.metadata.archives.fields.AVMHeadlineField(help_text='Short description of the full caption.', null=True, blank=True)),
                ('description', djangoplicity.metadata.archives.fields.AVMDescriptionField(help_text='Full caption and related description text for the image resource.', null=True, blank=True)),
                ('credit', djangoplicity.metadata.archives.fields.AVMCreditField(default=djangoplicity.media.consts.DEFAULT_CREDIT_FUNC, help_text='The minimum information that the Publisher would like to see mentioned when the resource is used.', null=False, blank=True)),
                ('id', djangoplicity.metadata.archives.fields.AVMIdField(help_text='Id of video - used in the URL for the image as well as the filename for the different formats.', serialize=False, primary_key=True)),
                ('type', djangoplicity.metadata.archives.fields.AVMTypeField(choices=((b'Observation', 'Observation'), (b'Artwork', 'Artwork'), (b'Photographic', 'Photographic'), (b'Planetary', 'Planetary'), (b'Simulation', 'Simulation'), (b'Collage', 'Collage'), (b'Chart', 'Chart')), max_length=12, blank=True, help_text='The type of image/media resource.', null=True, verbose_name='Type')),
                ('publisher', djangoplicity.metadata.archives.fields.AVMPublisherField(default=djangoplicity.media.consts.DEFAULT_PUBLISHER_FUNC, max_length=255, blank=True, help_text='Publisher of the resource.', null=True, verbose_name='Publisher')),
                ('publisher_id', djangoplicity.metadata.archives.fields.AVMPublisherIdField(default=djangoplicity.media.consts.DEFAULT_PUBLISHER_ID_FUNC, max_length=255, blank=True, help_text='ID of publisher registered as VAMP providers.', null=True, verbose_name='Publisher ID')),
                ('width', djangoplicity.metadata.archives.fields.AVMFileDimensionWidth(help_text='Width in pixels of the image resource.', null=True, verbose_name='Width', blank=True)),
                ('height', djangoplicity.metadata.archives.fields.AVMFileDimensionHeight(help_text='Height in pixels of the image resource.', null=True, verbose_name='Height', blank=True)),
                ('file_duration', djangoplicity.metadata.archives.fields.AVMFileDuration(help_text='The duration of the file in the format hh:mm:ss:frames.', max_length=13, null=True, verbose_name='File Duration', blank=True)),
                ('file_aspect_ratio', djangoplicity.metadata.archives.fields.AVMFileAspectRatio(choices=((b'4:3', b'4:3'), (b'16:9', b'16:9'), (b'16:10', b'16:10')), max_length=10, blank=True, help_text='The aspect ratio of the file.', null=True, verbose_name='File Aspect Ratio')),
                ('file_size', djangoplicity.metadata.archives.fields.AVMFileSize(help_text='Size of the image resource, measured in kilobytes.', null=True, verbose_name='File Size', blank=True)),
                ('audio_surround_format', djangoplicity.metadata.archives.fields.AVMAudioSurroundFormat(choices=((b'5.1', b'5.1'), (b'6.1', b'6.1'), (b'7.1', b'7.1'), (b'8.1', b'8.1'), (b'STEM', b'STEM tracks'), (b'Other', b'Other')), max_length=10, blank=True, help_text='The surround sound format of the audio.', null=True, verbose_name='Surround Sound Format')),
                ('old_ids', models.CharField(max_length=255)),
                ('magnet_uri', models.CharField(max_length=255, blank=True)),
                ('release_date', djangoplicity.archives.fields.ReleaseDateTimeField(db_index=True, null=True, blank=True)),
                ('embargo_date', djangoplicity.archives.fields.ReleaseDateTimeField(db_index=True, null=True, blank=True)),
                ('published', models.BooleanField(default=False, db_index=True, verbose_name='Published')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('release_date_owner', models.SlugField(null=True, blank=True)),
                ('facility', djangoplicity.metadata.translation.fields.TranslationFacilityManyToManyField(help_text='Telescopes or observatories used for the observations.', to='metadata.Facility', null=True, verbose_name='Facility', blank=True)),
                ('source', djangoplicity.translation.fields.TranslationForeignKey(related_name='translations', verbose_name='Translation source', blank=True, to='media.Video', null=True, only_sources=False, on_delete=django.db.models.deletion.CASCADE)),
                ('subject_category', djangoplicity.metadata.translation.fields.TranslationAVMSubjectCategoryField(help_text='The type(s) of object or objects in the resource, or general subject matter of an image, taken from a controlled vocabulary taxonomy.', to='metadata.TaxonomyHierarchy', null=True, verbose_name='Subject Category', blank=True)),
                ('subject_name', djangoplicity.metadata.translation.fields.TranslationAVMSubjectNameField(help_text='Proper names/catalog numbers for key objects/subjects in the image field.', to='metadata.SubjectName', null=True, verbose_name='Subject Name', blank=True)),
                ('tagging_status', djangoplicity.translation.fields.TranslationManyToManyField(to='metadata.TaggingStatus', blank=True)),
            ],
            options={
                'ordering': ['-priority', '-release_date'],
                'permissions': [('view_only_non_default', 'Can view only non default language')],
            },
            bases=(djangoplicity.archives.base.ArchiveModel, models.Model),
        ),
        migrations.CreateModel(
            name='VideoAudioTrack',
            fields=[
                ('id', djangoplicity.archives.fields.IdField(help_text='Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.', serialize=False, primary_key=True)),
                ('lang', models.CharField(default=b'en', max_length=5, verbose_name='Language', db_index=True, choices=[(b'ab', b'Abkhazian'), (b'aa', b'Afar'), (b'af', b'Afrikaans'), (b'ak', b'Akan'), (b'sq', b'Albanian'), (b'am', b'Amharic'), (b'ar', b'Arabic'), (b'an', b'Aragonese'), (b'hy', b'Armenian'), (b'as', b'Assamese'), (b'av', b'Avaric'), (b'ae', b'Avestan'), (b'ay', b'Aymara'), (b'az', b'Azerbaijani'), (b'bm', b'Bambara'), (b'ba', b'Bashkir'), (b'eu', b'Basque'), (b'be', b'Belarusian'), (b'bn', b'Bengali'), (b'bh', b'Bihari languages'), (b'bi', b'Bislama'), (b'nb', b'Bokm\xc3\xa5l, Norwegian; Norwegian Bokm\xc3\xa5l'), (b'bs', b'Bosnian'), (b'br', b'Breton'), (b'bg', b'Bulgarian'), (b'my', b'Burmese'), (b'ca', b'Catalan; Valencian'), (b'km', b'Central Khmer'), (b'ch', b'Chamorro'), (b'ce', b'Chechen'), (b'ny', b'Chichewa; Chewa; Nyanja'), (b'zh', b'Chinese'), (b'cu', b'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic'), (b'cv', b'Chuvash'), (b'kw', b'Cornish'), (b'co', b'Corsican'), (b'cr', b'Cree'), (b'hr', b'Croatian'), (b'cs', b'Czech'), (b'da', b'Danish'), (b'dv', b'Divehi; Dhivehi; Maldivian'), (b'nl', b'Dutch; Flemish'), (b'dz', b'Dzongkha'), (b'en', b'English'), (b'eo', b'Esperanto'), (b'et', b'Estonian'), (b'ee', b'Ewe'), (b'fo', b'Faroese'), (b'fj', b'Fijian'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'ff', b'Fulah'), (b'gd', b'Gaelic; Scottish Gaelic'), (b'gl', b'Galician'), (b'lg', b'Ganda'), (b'ka', b'Georgian'), (b'de', b'German'), (b'el', b'Greek'), (b'gn', b'Guarani'), (b'gu', b'Gujarati'), (b'ht', b'Haitian; Haitian Creole'), (b'ha', b'Hausa'), (b'he', b'Hebrew'), (b'hz', b'Herero'), (b'hi', b'Hindi'), (b'ho', b'Hiri Motu'), (b'hu', b'Hungarian'), (b'is', b'Icelandic'), (b'io', b'Ido'), (b'ig', b'Igbo'), (b'id', b'Indonesian'), (b'ia', b'Interlingua (International Auxiliary Language Association)'), (b'ie', b'Interlingue; Occidental'), (b'iu', b'Inuktitut'), (b'ik', b'Inupiaq'), (b'ga', b'Irish'), (b'it', b'Italian'), (b'ja', b'Japanese'), (b'jv', b'Javanese'), (b'kl', b'Kalaallisut; Greenlandic'), (b'kn', b'Kannada'), (b'kr', b'Kanuri'), (b'ks', b'Kashmiri'), (b'kk', b'Kazakh'), (b'ki', b'Kikuyu; Gikuyu'), (b'rw', b'Kinyarwanda'), (b'ky', b'Kirghiz; Kyrgyz'), (b'kv', b'Komi'), (b'kg', b'Kongo'), (b'ko', b'Korean'), (b'kj', b'Kuanyama; Kwanyama'), (b'ku', b'Kurdish'), (b'lo', b'Lao'), (b'la', b'Latin'), (b'lv', b'Latvian'), (b'li', b'Limburgan; Limburger; Limburgish'), (b'ln', b'Lingala'), (b'lt', b'Lithuanian'), (b'lu', b'Luba-Katanga'), (b'lb', b'Luxembourgish; Letzeburgesch'), (b'mk', b'Macedonian'), (b'mg', b'Malagasy'), (b'ms', b'Malay'), (b'ml', b'Malayalam'), (b'mt', b'Maltese'), (b'gv', b'Manx'), (b'mi', b'Maori'), (b'mr', b'Marathi'), (b'mh', b'Marshallese'), (b'mn', b'Mongolian'), (b'na', b'Nauru'), (b'nv', b'Navajo; Navaho'), (b'nd', b'Ndebele - North; North Ndebele'), (b'nr', b'Ndebele - South; South Ndebele'), (b'ng', b'Ndonga'), (b'ne', b'Nepali'), (b'se', b'Northern Sami'), (b'no', b'Norwegian'), (b'nn', b'Norwegian Nynorsk; Nynorsk, Norwegian'), (b'oc', b'Occitan (post 1500)'), (b'oj', b'Ojibwa'), (b'or', b'Oriya'), (b'om', b'Oromo'), (b'os', b'Ossetian; Ossetic'), (b'pi', b'Pali'), (b'pa', b'Panjabi; Punjabi'), (b'fa', b'Persian'), (b'pl', b'Polish'), (b'pt', b'Portuguese'), (b'ps', b'Pushto; Pashto'), (b'qu', b'Quechua'), (b'ro', b'Romanian; Moldavian; Moldovan'), (b'rm', b'Romansh'), (b'rn', b'Rundi'), (b'ru', b'Russian'), (b'sm', b'Samoan'), (b'sg', b'Sango'), (b'sa', b'Sanskrit'), (b'sc', b'Sardinian'), (b'sr', b'Serbian'), (b'sn', b'Shona'), (b'ii', b'Sichuan Yi; Nuosu'), (b'sd', b'Sindhi'), (b'si', b'Sinhala; Sinhalese'), (b'sk', b'Slovak'), (b'sl', b'Slovenian'), (b'so', b'Somali'), (b'st', b'Sotho; Southern'), (b'es', b'Spanish; Castilian'), (b'su', b'Sundanese'), (b'sw', b'Swahili'), (b'ss', b'Swati'), (b'sv', b'Swedish'), (b'tl', b'Tagalog'), (b'ty', b'Tahitian'), (b'tg', b'Tajik'), (b'ta', b'Tamil'), (b'tt', b'Tatar'), (b'te', b'Telugu'), (b'th', b'Thai'), (b'bo', b'Tibetan'), (b'ti', b'Tigrinya'), (b'to', b'Tonga (Tonga Islands)'), (b'ts', b'Tsonga'), (b'tn', b'Tswana'), (b'tr', b'Turkish'), (b'tk', b'Turkmen'), (b'tw', b'Twi'), (b'ug', b'Uighur; Uyghur'), (b'uk', b'Ukrainian'), (b'ur', b'Urdu'), (b'uz', b'Uzbek'), (b've', b'Venda'), (b'vi', b'Vietnamese'), (b'vo', b'Volap\xc3\xbck'), (b'wa', b'Walloon'), (b'cy', b'Welsh'), (b'fy', b'Western Frisian'), (b'wo', b'Wolof'), (b'xh', b'Xhosa'), (b'yi', b'Yiddish'), (b'yo', b'Yoruba'), (b'za', b'Zhuang; Chuang'), (b'zu', b'Zulu')])),
                ('published', models.BooleanField(default=False, db_index=True, verbose_name='Published')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('video', djangoplicity.translation.fields.TranslationForeignKey(to='media.Video', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'verbose_name': 'Video Audio Track',
            },
            bases=(djangoplicity.archives.base.ArchiveModel, models.Model),
        ),
        migrations.CreateModel(
            name='VideoBroadcastAudioTrack',
            fields=[
                ('id', djangoplicity.archives.fields.IdField(help_text='Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.', serialize=False, primary_key=True)),
                ('lang', models.CharField(default=b'en', max_length=5, verbose_name='Language', db_index=True, choices=[(b'ab', b'Abkhazian'), (b'aa', b'Afar'), (b'af', b'Afrikaans'), (b'ak', b'Akan'), (b'sq', b'Albanian'), (b'am', b'Amharic'), (b'ar', b'Arabic'), (b'an', b'Aragonese'), (b'hy', b'Armenian'), (b'as', b'Assamese'), (b'av', b'Avaric'), (b'ae', b'Avestan'), (b'ay', b'Aymara'), (b'az', b'Azerbaijani'), (b'bm', b'Bambara'), (b'ba', b'Bashkir'), (b'eu', b'Basque'), (b'be', b'Belarusian'), (b'bn', b'Bengali'), (b'bh', b'Bihari languages'), (b'bi', b'Bislama'), (b'nb', b'Bokm\xc3\xa5l, Norwegian; Norwegian Bokm\xc3\xa5l'), (b'bs', b'Bosnian'), (b'br', b'Breton'), (b'bg', b'Bulgarian'), (b'my', b'Burmese'), (b'ca', b'Catalan; Valencian'), (b'km', b'Central Khmer'), (b'ch', b'Chamorro'), (b'ce', b'Chechen'), (b'ny', b'Chichewa; Chewa; Nyanja'), (b'zh', b'Chinese'), (b'cu', b'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic'), (b'cv', b'Chuvash'), (b'kw', b'Cornish'), (b'co', b'Corsican'), (b'cr', b'Cree'), (b'hr', b'Croatian'), (b'cs', b'Czech'), (b'da', b'Danish'), (b'dv', b'Divehi; Dhivehi; Maldivian'), (b'nl', b'Dutch; Flemish'), (b'dz', b'Dzongkha'), (b'en', b'English'), (b'eo', b'Esperanto'), (b'et', b'Estonian'), (b'ee', b'Ewe'), (b'fo', b'Faroese'), (b'fj', b'Fijian'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'ff', b'Fulah'), (b'gd', b'Gaelic; Scottish Gaelic'), (b'gl', b'Galician'), (b'lg', b'Ganda'), (b'ka', b'Georgian'), (b'de', b'German'), (b'el', b'Greek'), (b'gn', b'Guarani'), (b'gu', b'Gujarati'), (b'ht', b'Haitian; Haitian Creole'), (b'ha', b'Hausa'), (b'he', b'Hebrew'), (b'hz', b'Herero'), (b'hi', b'Hindi'), (b'ho', b'Hiri Motu'), (b'hu', b'Hungarian'), (b'is', b'Icelandic'), (b'io', b'Ido'), (b'ig', b'Igbo'), (b'id', b'Indonesian'), (b'ia', b'Interlingua (International Auxiliary Language Association)'), (b'ie', b'Interlingue; Occidental'), (b'iu', b'Inuktitut'), (b'ik', b'Inupiaq'), (b'ga', b'Irish'), (b'it', b'Italian'), (b'ja', b'Japanese'), (b'jv', b'Javanese'), (b'kl', b'Kalaallisut; Greenlandic'), (b'kn', b'Kannada'), (b'kr', b'Kanuri'), (b'ks', b'Kashmiri'), (b'kk', b'Kazakh'), (b'ki', b'Kikuyu; Gikuyu'), (b'rw', b'Kinyarwanda'), (b'ky', b'Kirghiz; Kyrgyz'), (b'kv', b'Komi'), (b'kg', b'Kongo'), (b'ko', b'Korean'), (b'kj', b'Kuanyama; Kwanyama'), (b'ku', b'Kurdish'), (b'lo', b'Lao'), (b'la', b'Latin'), (b'lv', b'Latvian'), (b'li', b'Limburgan; Limburger; Limburgish'), (b'ln', b'Lingala'), (b'lt', b'Lithuanian'), (b'lu', b'Luba-Katanga'), (b'lb', b'Luxembourgish; Letzeburgesch'), (b'mk', b'Macedonian'), (b'mg', b'Malagasy'), (b'ms', b'Malay'), (b'ml', b'Malayalam'), (b'mt', b'Maltese'), (b'gv', b'Manx'), (b'mi', b'Maori'), (b'mr', b'Marathi'), (b'mh', b'Marshallese'), (b'mn', b'Mongolian'), (b'na', b'Nauru'), (b'nv', b'Navajo; Navaho'), (b'nd', b'Ndebele - North; North Ndebele'), (b'nr', b'Ndebele - South; South Ndebele'), (b'ng', b'Ndonga'), (b'ne', b'Nepali'), (b'se', b'Northern Sami'), (b'no', b'Norwegian'), (b'nn', b'Norwegian Nynorsk; Nynorsk, Norwegian'), (b'oc', b'Occitan (post 1500)'), (b'oj', b'Ojibwa'), (b'or', b'Oriya'), (b'om', b'Oromo'), (b'os', b'Ossetian; Ossetic'), (b'pi', b'Pali'), (b'pa', b'Panjabi; Punjabi'), (b'fa', b'Persian'), (b'pl', b'Polish'), (b'pt', b'Portuguese'), (b'ps', b'Pushto; Pashto'), (b'qu', b'Quechua'), (b'ro', b'Romanian; Moldavian; Moldovan'), (b'rm', b'Romansh'), (b'rn', b'Rundi'), (b'ru', b'Russian'), (b'sm', b'Samoan'), (b'sg', b'Sango'), (b'sa', b'Sanskrit'), (b'sc', b'Sardinian'), (b'sr', b'Serbian'), (b'sn', b'Shona'), (b'ii', b'Sichuan Yi; Nuosu'), (b'sd', b'Sindhi'), (b'si', b'Sinhala; Sinhalese'), (b'sk', b'Slovak'), (b'sl', b'Slovenian'), (b'so', b'Somali'), (b'st', b'Sotho; Southern'), (b'es', b'Spanish; Castilian'), (b'su', b'Sundanese'), (b'sw', b'Swahili'), (b'ss', b'Swati'), (b'sv', b'Swedish'), (b'tl', b'Tagalog'), (b'ty', b'Tahitian'), (b'tg', b'Tajik'), (b'ta', b'Tamil'), (b'tt', b'Tatar'), (b'te', b'Telugu'), (b'th', b'Thai'), (b'bo', b'Tibetan'), (b'ti', b'Tigrinya'), (b'to', b'Tonga (Tonga Islands)'), (b'ts', b'Tsonga'), (b'tn', b'Tswana'), (b'tr', b'Turkish'), (b'tk', b'Turkmen'), (b'tw', b'Twi'), (b'ug', b'Uighur; Uyghur'), (b'uk', b'Ukrainian'), (b'ur', b'Urdu'), (b'uz', b'Uzbek'), (b've', b'Venda'), (b'vi', b'Vietnamese'), (b'vo', b'Volap\xc3\xbck'), (b'wa', b'Walloon'), (b'cy', b'Welsh'), (b'fy', b'Western Frisian'), (b'wo', b'Wolof'), (b'xh', b'Xhosa'), (b'yi', b'Yiddish'), (b'yo', b'Yoruba'), (b'za', b'Zhuang; Chuang'), (b'zu', b'Zulu')])),
                ('published', models.BooleanField(default=False, db_index=True, verbose_name='Published')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('video', djangoplicity.translation.fields.TranslationForeignKey(to='media.Video', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'verbose_name': 'Video Broadcast Audio Track',
            },
            bases=(djangoplicity.archives.base.ArchiveModel, models.Model),
        ),
        migrations.CreateModel(
            name='VideoContact',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255, blank=True)),
                ('email', models.CharField(max_length=255, blank=True)),
                ('telephone', models.CharField(max_length=255, blank=True)),
                ('video', djangoplicity.translation.fields.TranslationForeignKey(to='media.Video', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'verbose_name': 'Contact',
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='VideoSubtitle',
            fields=[
                ('id', djangoplicity.archives.fields.IdField(help_text='Ids are only allowed to contain letters, numbers, underscores or hyphens. They are used in URLs for the archive item.', serialize=False, primary_key=True)),
                ('lang', models.CharField(default=b'en', max_length=5, verbose_name='Language', db_index=True, choices=[(b'ab', b'Abkhazian'), (b'aa', b'Afar'), (b'af', b'Afrikaans'), (b'ak', b'Akan'), (b'sq', b'Albanian'), (b'am', b'Amharic'), (b'ar', b'Arabic'), (b'an', b'Aragonese'), (b'hy', b'Armenian'), (b'as', b'Assamese'), (b'av', b'Avaric'), (b'ae', b'Avestan'), (b'ay', b'Aymara'), (b'az', b'Azerbaijani'), (b'bm', b'Bambara'), (b'ba', b'Bashkir'), (b'eu', b'Basque'), (b'be', b'Belarusian'), (b'bn', b'Bengali'), (b'bh', b'Bihari languages'), (b'bi', b'Bislama'), (b'nb', b'Bokm\xc3\xa5l, Norwegian; Norwegian Bokm\xc3\xa5l'), (b'bs', b'Bosnian'), (b'br', b'Breton'), (b'bg', b'Bulgarian'), (b'my', b'Burmese'), (b'ca', b'Catalan; Valencian'), (b'km', b'Central Khmer'), (b'ch', b'Chamorro'), (b'ce', b'Chechen'), (b'ny', b'Chichewa; Chewa; Nyanja'), (b'zh', b'Chinese'), (b'cu', b'Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic'), (b'cv', b'Chuvash'), (b'kw', b'Cornish'), (b'co', b'Corsican'), (b'cr', b'Cree'), (b'hr', b'Croatian'), (b'cs', b'Czech'), (b'da', b'Danish'), (b'dv', b'Divehi; Dhivehi; Maldivian'), (b'nl', b'Dutch; Flemish'), (b'dz', b'Dzongkha'), (b'en', b'English'), (b'eo', b'Esperanto'), (b'et', b'Estonian'), (b'ee', b'Ewe'), (b'fo', b'Faroese'), (b'fj', b'Fijian'), (b'fi', b'Finnish'), (b'fr', b'French'), (b'ff', b'Fulah'), (b'gd', b'Gaelic; Scottish Gaelic'), (b'gl', b'Galician'), (b'lg', b'Ganda'), (b'ka', b'Georgian'), (b'de', b'German'), (b'el', b'Greek'), (b'gn', b'Guarani'), (b'gu', b'Gujarati'), (b'ht', b'Haitian; Haitian Creole'), (b'ha', b'Hausa'), (b'he', b'Hebrew'), (b'hz', b'Herero'), (b'hi', b'Hindi'), (b'ho', b'Hiri Motu'), (b'hu', b'Hungarian'), (b'is', b'Icelandic'), (b'io', b'Ido'), (b'ig', b'Igbo'), (b'id', b'Indonesian'), (b'ia', b'Interlingua (International Auxiliary Language Association)'), (b'ie', b'Interlingue; Occidental'), (b'iu', b'Inuktitut'), (b'ik', b'Inupiaq'), (b'ga', b'Irish'), (b'it', b'Italian'), (b'ja', b'Japanese'), (b'jv', b'Javanese'), (b'kl', b'Kalaallisut; Greenlandic'), (b'kn', b'Kannada'), (b'kr', b'Kanuri'), (b'ks', b'Kashmiri'), (b'kk', b'Kazakh'), (b'ki', b'Kikuyu; Gikuyu'), (b'rw', b'Kinyarwanda'), (b'ky', b'Kirghiz; Kyrgyz'), (b'kv', b'Komi'), (b'kg', b'Kongo'), (b'ko', b'Korean'), (b'kj', b'Kuanyama; Kwanyama'), (b'ku', b'Kurdish'), (b'lo', b'Lao'), (b'la', b'Latin'), (b'lv', b'Latvian'), (b'li', b'Limburgan; Limburger; Limburgish'), (b'ln', b'Lingala'), (b'lt', b'Lithuanian'), (b'lu', b'Luba-Katanga'), (b'lb', b'Luxembourgish; Letzeburgesch'), (b'mk', b'Macedonian'), (b'mg', b'Malagasy'), (b'ms', b'Malay'), (b'ml', b'Malayalam'), (b'mt', b'Maltese'), (b'gv', b'Manx'), (b'mi', b'Maori'), (b'mr', b'Marathi'), (b'mh', b'Marshallese'), (b'mn', b'Mongolian'), (b'na', b'Nauru'), (b'nv', b'Navajo; Navaho'), (b'nd', b'Ndebele - North; North Ndebele'), (b'nr', b'Ndebele - South; South Ndebele'), (b'ng', b'Ndonga'), (b'ne', b'Nepali'), (b'se', b'Northern Sami'), (b'no', b'Norwegian'), (b'nn', b'Norwegian Nynorsk; Nynorsk, Norwegian'), (b'oc', b'Occitan (post 1500)'), (b'oj', b'Ojibwa'), (b'or', b'Oriya'), (b'om', b'Oromo'), (b'os', b'Ossetian; Ossetic'), (b'pi', b'Pali'), (b'pa', b'Panjabi; Punjabi'), (b'fa', b'Persian'), (b'pl', b'Polish'), (b'pt', b'Portuguese'), (b'ps', b'Pushto; Pashto'), (b'qu', b'Quechua'), (b'ro', b'Romanian; Moldavian; Moldovan'), (b'rm', b'Romansh'), (b'rn', b'Rundi'), (b'ru', b'Russian'), (b'sm', b'Samoan'), (b'sg', b'Sango'), (b'sa', b'Sanskrit'), (b'sc', b'Sardinian'), (b'sr', b'Serbian'), (b'sn', b'Shona'), (b'ii', b'Sichuan Yi; Nuosu'), (b'sd', b'Sindhi'), (b'si', b'Sinhala; Sinhalese'), (b'sk', b'Slovak'), (b'sl', b'Slovenian'), (b'so', b'Somali'), (b'st', b'Sotho; Southern'), (b'es', b'Spanish; Castilian'), (b'su', b'Sundanese'), (b'sw', b'Swahili'), (b'ss', b'Swati'), (b'sv', b'Swedish'), (b'tl', b'Tagalog'), (b'ty', b'Tahitian'), (b'tg', b'Tajik'), (b'ta', b'Tamil'), (b'tt', b'Tatar'), (b'te', b'Telugu'), (b'th', b'Thai'), (b'bo', b'Tibetan'), (b'ti', b'Tigrinya'), (b'to', b'Tonga (Tonga Islands)'), (b'ts', b'Tsonga'), (b'tn', b'Tswana'), (b'tr', b'Turkish'), (b'tk', b'Turkmen'), (b'tw', b'Twi'), (b'ug', b'Uighur; Uyghur'), (b'uk', b'Ukrainian'), (b'ur', b'Urdu'), (b'uz', b'Uzbek'), (b've', b'Venda'), (b'vi', b'Vietnamese'), (b'vo', b'Volap\xc3\xbck'), (b'wa', b'Walloon'), (b'cy', b'Welsh'), (b'fy', b'Western Frisian'), (b'wo', b'Wolof'), (b'xh', b'Xhosa'), (b'yi', b'Yiddish'), (b'yo', b'Yoruba'), (b'za', b'Zhuang; Chuang'), (b'zu', b'Zulu')])),
                ('published', models.BooleanField(default=False, db_index=True, verbose_name='Published')),
                ('last_modified', models.DateTimeField(auto_now=True, verbose_name='Last modified')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='Created')),
                ('video', djangoplicity.translation.fields.TranslationForeignKey(to='media.Video', on_delete=django.db.models.deletion.CASCADE)),
            ],
            options={
                'verbose_name': 'Video Subtitle',
            },
            bases=(djangoplicity.archives.base.ArchiveModel, models.Model),
        ),
        migrations.AddField(
            model_name='pictureoftheweek',
            name='video',
            field=djangoplicity.translation.fields.TranslationForeignKey(blank=True, to='media.Video', null=True, only_sources=False, on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='image',
            name='colors',
            field=djangoplicity.translation.fields.TranslationManyToManyField(to='media.Color', verbose_name='Colours', through='media.ImageColor'),
            preserve_default=True,
        ),
        migrations.AddField(
            model_name='image',
            name='source',
            field=djangoplicity.translation.fields.TranslationForeignKey(related_name='translations', verbose_name='Translation source', blank=True, to='media.Image', null=True, only_sources=False, on_delete=django.db.models.deletion.CASCADE),
            preserve_default=True,
        ),
        migrations.CreateModel(
            name='ImageComparisonProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Image comparison translation',
                'proxy': True,
            },
            bases=('media.imagecomparison', djangoplicity.archives.translation.TranslationProxyMixin),
        ),
        migrations.CreateModel(
            name='ImageProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Image translation',
                'proxy': True,
            },
            bases=('media.image', djangoplicity.archives.translation.TranslationProxyMixin),
        ),
        migrations.CreateModel(
            name='PictureOfTheWeekProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Picture of the Week translation',
                'proxy': True,
            },
            bases=('media.pictureoftheweek', djangoplicity.archives.translation.TranslationProxyMixin),
        ),
        migrations.CreateModel(
            name='VideoProxy',
            fields=[
            ],
            options={
                'verbose_name': 'Video translation',
                'proxy': True,
            },
            bases=('media.video', djangoplicity.archives.translation.TranslationProxyMixin),
        ),
    ]
